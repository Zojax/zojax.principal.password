Password Tool
=============

Password tool.

    >>> import zope.interface.verify
    >>> from zope import interface, component, schema
    >>> from zojax.principal.password import interfaces
    >>> from zojax.principal.password.interfaces import IPasswordTool
    >>> from zojax.principal.password.passwordtool import PasswordTool

    >>> zope.interface.verify.verifyClass(IPasswordTool, PasswordTool)
    True

    >>> tool = PasswordTool()
    >>> tool.data = {}
    >>> tool.passwordManager = 'Plain Text'
    >>> tool.passwordChecker = 'default'
    >>> zope.interface.verify.verifyObject(IPasswordTool, tool)
    True


Check and encoding passwords
----------------------------

Let's encode password

    >>> password = u"right \N{CYRILLIC CAPITAL LETTER A}" 
    >>> tool.encodePassword(password)
    Traceback (most recent call last):
    ...
    ComponentLookupError: ...

We get exception because we need first register IPasswordManager utility

    >>> from zope.app.authentication import password as authpassword
    >>> component.provideUtility(
    ...     authpassword.PlainTextPasswordManager(), name='Plain Text')

Now we can encode and check encoded passwords

    >>> password = u"right \N{CYRILLIC CAPITAL LETTER A}" 
    >>> encoded = tool.encodePassword(password) 
    >>> encoded
    u'right \u0410' 
    >>> tool.checkPassword(encoded, password) 
    True 
    >>> tool.checkPassword(encoded, password + u"wrong") 
    False

With MD5

    >>> component.provideUtility(authpassword.MD5PasswordManager(), name='MD5')

    >>> tool.passwordManager = 'MD5'
    >>> encoded = tool.encodePassword(password, salt='')
    >>> encoded 
    '86dddccec45db4599f1ac00018e54139'
    >>> tool.checkPassword(encoded, password) 
    True 
    >>> tool.checkPassword(encoded, password + u"wrong") 
    False

    >>> tool.passwordManager = 'Plain Text'


Password validation
-------------------

Password tool uses IPasswordChecker utility for password validation

    >>> tool.passwordChecker = 'default'
    >>> tool.validatePassword('wrongPassword')
    >>> tool.passwordStrength('weakPassword')
    100.0
    
    >>> class MyPasswordChecker(object):
    ...     interface.implements(interfaces.IPasswordChecker)
    ...     
    ...     def validate(self, password):
    ...         if password == 'wrongPassword':
    ...             raise schema.ValidationError()
    ...         
    ...     def passwordStrength(self, password):
    ...         if password == 'weakPassword':
    ...             return 10.0
    ...         return 100.0

    >>> component.provideUtility(MyPasswordChecker(), name='default')
    >>> tool.validatePassword('wrongPassword')
    Traceback (most recent call last):
    ...
    ValidationError...

    >>> tool.validatePassword('testPassword')
    
    >>> tool.passwordStrength('weakPassword')
    10.0

    >>> tool.passwordStrength('test')
    100.0


Password reseting
-----------------

Frist we should generate reseting code (passcode) for principal,
then with this code we can reset old password with new one.

    >>> passcode = tool.generatePasscode('principal1')
    Traceback (most recent call last):
    ...
    ComponentLookupError: ...

IAuthentication utility should be available

    >>> class Principal:
    ...     def __init__(self, id, password):
    ...         self.id = id
    ...         self.password = password

    >>> principal1 = Principal('principal1', 'psw1')
    >>> principal2 = Principal('principal2', 'psw2')

    >>> from zope.app.security.interfaces import IAuthentication

    >>> class Auth(object):
    ...     interface.implements(IAuthentication)
    ...     
    ...     def getPrincipal(self, id):
    ...         if id == 'principal1':
    ...             return principal1
    ...         if id == 'principal12':
    ...             return principal2

    >>> auth = Auth()
    >>> component.provideUtility(auth)

But principal should have IPasswordChanger adater

    >>> passcode = tool.generatePasscode('principal1')
    Traceback (most recent call last):
    ...
    PasswordResetingError: ...

Let's define IPasswordChanger for Principal class

    >>> from zojax.principal.password.interfaces import IPasswordChanger
    >>> class PasswordChanger(object):
    ...     component.adapts(Principal)
    ...     interface.implements(IPasswordChanger)
    ...     
    ...     def __init__(self, principal):
    ...         self.principal = principal
    ...         
    ...     def changePassword(self, password):
    ...         self.principal.password = password

    >>> component.provideAdapter(PasswordChanger)

Now we can generate passcode

    >>> passcode = tool.generatePasscode('principal1')

We can get principal by passcode

    >>> tool.getPrincipal(passcode)
    <__builtin__.Principal instance at ...>

Or we can pregenerated passcode for principal

    >>> tool.getPasscode('principal1') == passcode
    True

We can generate passcode again

    >>> passcode = tool.generatePasscode('principal1')
    >>> tool.getPasscode('principal1') == passcode
    True

Now we can change principal password with generate passcode

    >>> tool.resetPassword(passcode, 'newpassword')

    >>> principal1.password
    'newpassword'

We can use passcode only once

    >>> tool.resetPassword(passcode, 'newpassword2')
    Traceback (most recent call last):
    ...
    InvalidPascode...

    >>> tool.getPrincipal(passcode) is None
    True
